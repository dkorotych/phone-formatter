import io.micronaut.gradle.MicronautRuntime
import io.micronaut.gradle.MicronautTestRuntime

plugins {
    id("com.github.johnrengelman.shadow") version "7.1.0"
    id("io.micronaut.application") version "2.0.7"
    id("org.openrewrite.rewrite") version "5.13.1"
    id("com.github.ben-manes.versions") version "0.39.0"
}

version = "0.1"
group = "com.github.dkorotych.phone.formatter"

repositories {
    mavenCentral()
}

micronaut {
    runtime(MicronautRuntime.NETTY)
    testRuntime(MicronautTestRuntime.JUNIT_5)
    processing {
        incremental(true)
        annotations("com.github.dkorotych.phone.formatter.*")
    }
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("javax.annotation:javax.annotation-api")
    compileOnly("org.projectlombok:lombok")
    runtimeOnly("ch.qos.logback:logback-classic")
    rewrite("org.openrewrite.recipe:rewrite-micronaut:1.3.0")
    implementation("io.micronaut:micronaut-validation")

    implementation "io.projectreactor:reactor-core:3.4.11"
    implementation("com.googlecode.libphonenumber:libphonenumber:8.12.35")
    implementation("com.kcthota:emoji4j:6.0")
    implementation("io.sentry:sentry-logback:5.2.4")

    testImplementation("org.skyscreamer:jsonassert:1.5.0")
    testImplementation("org.assertj:assertj-core:3.21.0")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.8.1")
}


application {
    mainClass.set("com.github.dkorotych.phone.micronaut.Application")
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

rewrite {
    activeRecipe("org.openrewrite.java.micronaut.Micronaut2to3Migration")
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    checkConstraints = true
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

dependencyUpdates.gradleReleaseChannel = "current"
