plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "3.7.9"
    id("org.openrewrite.rewrite") version "5.40.5"
    id("com.github.ben-manes.versions") version "0.46.0"
}

version = "0.1"
group = "com.github.dkorotych.phone.formatter"

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("jakarta.annotation:jakarta.annotation-api")
    compileOnly("org.projectlombok:lombok")
    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("io.micronaut:micronaut-validation")

    implementation("com.googlecode.libphonenumber:libphonenumber:8.13.12")
    implementation("com.vdurmont:emoji-java:5.1.1")
    implementation("io.sentry:sentry-logback:6.19.1")

    testImplementation("org.skyscreamer:jsonassert:1.5.1")
    testImplementation("org.assertj:assertj-core:3.24.2")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.9.3")

    rewrite(platform("org.openrewrite.recipe:rewrite-recipe-bom:1.19.3"))
    rewrite("org.openrewrite.recipe:rewrite-github-actions")
    rewrite("org.openrewrite.recipe:rewrite-logging-frameworks")
    rewrite("org.openrewrite.recipe:rewrite-migrate-java")
    rewrite("org.openrewrite.recipe:rewrite-micronaut")
    rewrite("org.openrewrite:rewrite-gradle")
}


application {
    mainClass.set("com.github.dkorotych.phone.micronaut.Application")
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.github.dkorotych.phone.formatter.*")
    }
}

shadowJar {
    mergeServiceFiles()
}

rewrite {
    activeRecipe("com.github.dkorotych.phone.formatter.CustomRecipes")
}

dependencyUpdates {
    checkForGradleUpdate = true
    revision = "release"
    gradleReleaseChannel = "current"
    resolutionStrategy {
        componentSelection {
            all { ComponentSelection selection ->
                def candidate = selection.candidate
                if (candidate.version.contains("beta")) {
                    selection.reject("Plugin ${candidate.displayName} reject because is a beta release")
                }
                if (candidate.version.matches('.+-M\\d+$')) {
                    selection.reject("Dependency ${candidate.displayName} reject because is a milestone release")
                }
            }
        }
    }
}
